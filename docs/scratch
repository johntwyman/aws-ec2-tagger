const k8s = require('@kubernetes/client-node');
const uniq = (a) => Array.from(new Set(a)).filter((element) => element !== undefined);
const kc = new k8s.KubeConfig(); kc.loadFromDefault();
const k8sApi = kc.makeApiClient(k8s.CoreV1Api); const pods = await k8sApi.listNamespacedPod('default'); const nodes = [];
for (const pod of pods.body.items) { const podName = pod.metadata.labels.app ? pod.metadata.labels.app : pod.metadata.name; const releaseName = pod.metadata.labels.release ? pod.metadata.labels.release : undefined; const node = nodes.find((x) => x.nodeName === pod.spec.nodeName); if (node) { node.pods.push(podName); node.releases.push(releaseName); } else nodes.push({ nodeName: pod.spec.nodeName, pods: [podName], releases: [releaseName] }); } for (const node of nodes) { node.pods = uniq(node.pods); node.releases = uniq(node.releases); }

//
// node --experimental-repl-await --experimental-specifier-resolution=node

let { EC2Client, DescribeInstancesCommand } = await import('@aws-sdk/client-ec2');
const REGION = 'ap-southeast-2';
const ec2Client = new EC2Client({ region: REGION });

nodes.forEach((node) => {
  const params = { Filters: [ { Name: 'private-dns-name', Values: [node.nodeName] }, ], };
  try {
    const data = await ec2Client.send(new DescribeInstancesCommand(params));
    const result = {
      instanceId: data.Reservations[0].Instances[0].InstanceId,
      tags: data.Reservations[0].Instances[0].Tags,
    };
    return result;
  } catch (err) {
    console.log('Error', err);
    return null;
  }
})
